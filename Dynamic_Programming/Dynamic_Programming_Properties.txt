Dynamic Programming:
********************

Dynamic Programming is an algorithmic paradigm that solves a given complex
problem by breaking it into subproblems and stores the results of subproblems
to avoid computing the same results again. Following are the two main
properties of a problem that suggest that the given problem can be solved using
Dynamic programming.

1) Overlapping Subproblems
2) Optimal Substructure

1) Overlapping Subproblems:
Like Divide and Conquer, Dynamic Programming combines solutions to
sub-problems.Dynamic Programming is mainly used when solutions of same
subproblems are needed again and again. In dynamic programming,
computed solutions to subproblems are stored in a table so that these don’t
have to recomputed. So Dynamic Programming is not useful when there are no
common (overlapping) subproblems because there is no point storing the
solutions if they are not needed again. For example, Binary Search doesn’t have
 common subproblems. If we take example of following recursive program for
 Fibonacci Numbers, there are many subproblems which are solved again and again.


2) Optimal Substructure: A given problem has Optimal Substructure Property if
    optimal solution of the given problem can be obtained by using optimal
    solutions of its subproblems.

For example, the Shortest Path problem has following optimal substructure
property:
If a node x lies in the shortest path from a source node u to destination node
v then the shortest path from u to v is combination of shortest path from u to
x and shortest path from x to v. The standard All Pair Shortest Path algorithms
like Floyd–Warshall and Bellman–Ford are typical examples of Dynamic
Programming.

On the other hand, the Longest Path problem doesn’t have the Optimal
Substructure property. Here by Longest Path we mean longest simple path (path
without cycle) between two nodes. Consider the following unweighted graph given
in the CLRS book. There are two longest paths from q to t: q→r→t and q→s→t.
Unlike shortest paths, these longest paths do not have the optimal substructure
property. For example, the longest path q→r→t is not a combination of longest
path from q to r and longest path from r to t, because the longest path from q
to r is q→s→t→r and the longest path from r to t is r→q→s→t.


        q <-> r
        ^     ^
        |     |
        v     v
        s <-> t


Time = # of states the dynamic programming algorithm considers * time taken per
state.

By number of states, I mean the number of different intermediate answers
computed by the algorithm.

For example, let's say your DP approach requires O(n2)O(n2) states and
evaluating each state involves an O(logn)O(log⁡n) binary search plus some
constant time operations. Then the overall algorithm would take
O(n2logn)O(n2log⁡n).